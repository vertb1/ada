local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Utility functions
local Utility = {
    getCharacter = function(player)
        local character = player.Character
        if not character then return end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return end
        
        return character, humanoid.MaxHealth, (humanoid.Health/humanoid.MaxHealth) * 100, humanoid.Health, character:FindFirstChild("HumanoidRootPart")
    end,
    
    getRootPart = function(player)
        return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    end,
    
    isTeamMate = function(player)
        return player.Team and player.Team == LocalPlayer.Team
    end
}

-- Settings
local Settings = {
    showTeam = false,
    allyColor = Color3.fromRGB(0, 255, 0),
    enemyColor = Color3.fromRGB(255, 0, 0),
    maxEspDistance = 1000,
    toggleBoxes = true,
    toggleTracers = true,
    unlockTracers = false,
    showHealthBar = true,
    proximityArrows = true,
    maxProximityArrowDistance = 100,
    proximityArrowsSize = 20,
    textSize = 13
}

local EntityESP = {}
EntityESP.__index = EntityESP

local worldToViewportPoint = clonefunction(Instance.new('Camera').WorldToViewportPoint)
local vectorToWorldSpace = CFrame.new().VectorToWorldSpace
local getMouseLocation = clonefunction(UserInputService.GetMouseLocation)

local id = HttpService:GenerateGUID(false)
local userId = "1234"

local lerp = Color3.new().lerp
local vector3New = Vector3.new
local Vector2New = Vector2.new

local mathFloor = math.floor
local mathRad = math.rad
local mathCos = math.cos
local mathSin = math.sin
local mathAtan2 = math.atan2

local showTeam = Settings.showTeam
local allyColor = Settings.allyColor
local enemyColor = Settings.enemyColor
local maxEspDistance = Settings.maxEspDistance
local toggleBoxes = Settings.toggleBoxes
local toggleTracers = Settings.toggleTracers
local unlockTracers = Settings.unlockTracers
local showHealthBar = Settings.showHealthBar
local proximityArrows = Settings.proximityArrows
local maxProximityArrowDistance = Settings.maxProximityArrowDistance

local scalarPointAX, scalarPointAY
local scalarPointBX, scalarPointBY

local labelOffset, tracerOffset
local boxOffsetTopRight, boxOffsetBottomLeft
local healthBarOffsetTopRight, healthBarOffsetBottomLeft
local healthBarValueOffsetTopRight, healthBarValueOffsetBottomLeft

local scalarSize = Settings.proximityArrowsSize

local ESP_RED_COLOR = Color3.fromRGB(192, 57, 43)
local ESP_GREEN_COLOR = Color3.fromRGB(39, 174, 96)
local TRIANGLE_ANGLE = mathRad(45)

EntityESP.id = 0

function EntityESP.new(player)
    EntityESP.id += 1
    
    local self = setmetatable({}, EntityESP)
    
    self._id = EntityESP.id
    self._player = player
    self._playerName = player.Name
    
    self._triangle = Drawing.new('Triangle')
    self._triangle.Visible = true
    self._triangle.Thickness = 0
    self._triangle.Color = Color3.fromRGB(255, 255, 255)
    self._triangle.Filled = true
    
    self._label = Drawing.new('Text')
    self._label.Visible = false
    self._label.Center = true
    self._label.Outline = true
    self._label.Text = ''
    self._label.Size = Settings.textSize
    self._label.Color = Color3.fromRGB(255, 255, 255)
    
    self._box = Drawing.new('Quad')
    self._box.Visible = false
    self._box.Thickness = 1
    self._box.Filled = false
    self._box.Color = Color3.fromRGB(255, 255, 255)
    
    self._healthBar = Drawing.new('Quad')
    self._healthBar.Visible = false
    self._healthBar.Thickness = 1
    self._healthBar.Filled = false
    self._healthBar.Color = Color3.fromRGB(255, 255, 255)
    
    self._healthBarValue = Drawing.new('Quad')
    self._healthBarValue.Visible = false
    self._healthBarValue.Thickness = 1
    self._healthBarValue.Filled = true
    self._healthBarValue.Color = Color3.fromRGB(0, 255, 0)
    
    self._line = Drawing.new('Line')
    self._line.Visible = false
    self._line.Color = Color3.fromRGB(255, 255, 255)
    
    self._labelObject = self._label
    
    player._espObject = self
    
    return self
end

function EntityESP:ConvertVector(...)
    return vectorToWorldSpace(self._cameraCFrame, vector3New(...))
end

function EntityESP:GetOffsetTrianglePosition(closestPoint, radiusOfDegree)
    local cosOfRadius, sinOfRadius = mathCos(radiusOfDegree), mathSin(radiusOfDegree)
    local closestPointX, closestPointY = closestPoint.X, closestPoint.Y
    
    local sameBCCos = (closestPointX + scalarPointBX * cosOfRadius)
    local sameBCSin = (closestPointY + scalarPointBX * sinOfRadius)
    
    local sameACSin = (scalarPointAY * sinOfRadius)
    local sameACCos = (scalarPointAY * cosOfRadius)
    
    local pointX1 = (closestPointX + scalarPointAX * cosOfRadius) - sameACSin
    local pointY1 = closestPointY + (scalarPointAX * sinOfRadius) + sameACCos
    
    local pointX2 = sameBCCos - (scalarPointBY * sinOfRadius)
    local pointY2 = sameBCSin + (scalarPointBY * cosOfRadius)
    
    local pointX3 = sameBCCos - sameACSin
    local pointY3 = sameBCSin + sameACCos
    
    return Vector2New(mathFloor(pointX1), mathFloor(pointY1)), 
           Vector2New(mathFloor(pointX2), mathFloor(pointY2)), 
           Vector2New(mathFloor(pointX3), mathFloor(pointY3))
end

function EntityESP:Update()
    local camera = workspace.CurrentCamera
    self._camera = camera
    if not camera then return self:Hide() end
    
    local character, maxHealth, floatHealth, health, rootPart = Utility:getCharacter(self._player)
    if not character then return self:Hide() end
    
    rootPart = rootPart or Utility:getRootPart(self._player)
    if not rootPart then return self:Hide() end
    
    local rootPartPosition = rootPart.Position
    
    local labelPos, visibleOnScreen = worldToViewportPoint(camera, rootPartPosition + labelOffset)
    local triangle = self._triangle
    
    local isTeamMate = Utility:isTeamMate(self._player)
    if isTeamMate and not showTeam then return self:Hide() end
    
    local distance = (rootPartPosition - self._cameraPosition).Magnitude
    if distance > maxEspDistance then return self:Hide() end
    
    local espColor = isTeamMate and allyColor or enemyColor
    local canView = false
    
    if proximityArrows and not visibleOnScreen and distance < maxProximityArrowDistance then
        local vectorUnit
        
        if labelPos.Z < 0 then
            vectorUnit = -(Vector2.new(labelPos.X, labelPos.Y) - self._viewportSizeCenter).Unit
        else
            vectorUnit = (Vector2.new(labelPos.X, labelPos.Y) - self._viewportSizeCenter).Unit
        end
        
        local degreeOfCorner = -mathAtan2(vectorUnit.X, vectorUnit.Y) - TRIANGLE_ANGLE
        local closestPointToPlayer = self._viewportSizeCenter + vectorUnit * scalarSize
        
        local pointA, pointB, pointC = self:GetOffsetTrianglePosition(closestPointToPlayer, degreeOfCorner)
        
        triangle.PointA = pointA
        triangle.PointB = pointB
        triangle.PointC = pointC
        triangle.Color = espColor
        canView = true
    end
    
    triangle.Visible = canView
    if not visibleOnScreen then return self:Hide(true) end
    
    self._visible = visibleOnScreen
    
    local label = self._label
    local box = self._box
    local line = self._line
    local healthBar = self._healthBar
    local healthBarValue = self._healthBarValue
    
    local text = string.format("[%s] [%d]\n[%d/%d] [%d%%] [%s]",
        self._playerName,
        mathFloor(distance),
        mathFloor(health),
        mathFloor(maxHealth),
        mathFloor(floatHealth),
        userId
    )
    
    label.Visible = visibleOnScreen
    label.Position = Vector2New(labelPos.X, labelPos.Y - label.TextBounds.Y)
    label.Text = text
    label.Color = espColor
    
    if toggleBoxes then
        local boxTopRight = worldToViewportPoint(camera, rootPartPosition + boxOffsetTopRight)
        local boxBottomLeft = worldToViewportPoint(camera, rootPartPosition + boxOffsetBottomLeft)
        
        box.Visible = visibleOnScreen
        box.PointA = Vector2New(boxTopRight.X, boxTopRight.Y)
        box.PointB = Vector2New(boxBottomLeft.X, boxTopRight.Y)
        box.PointC = Vector2New(boxBottomLeft.X, boxBottomLeft.Y)
        box.PointD = Vector2New(boxTopRight.X, boxBottomLeft.Y)
        box.Color = espColor
    else
        box.Visible = false
    end
    
    if toggleTracers then
        local linePosition = worldToViewportPoint(camera, rootPartPosition + tracerOffset)
        
        line.Visible = visibleOnScreen
        line.From = unlockTracers and getMouseLocation(UserInputService) or self._viewportSize
        line.To = Vector2New(linePosition.X, linePosition.Y)
        line.Color = espColor
    else
        line.Visible = false
    end
    
    if showHealthBar then
        local healthBarValueHealth = (1 - (floatHealth / 100)) * 7.4
        
        local healthBarTopRight = worldToViewportPoint(camera, rootPartPosition + healthBarOffsetTopRight)
        local healthBarBottomLeft = worldToViewportPoint(camera, rootPartPosition + healthBarOffsetBottomLeft)
        
        local healthBarValueTopRight = worldToViewportPoint(camera, rootPartPosition + healthBarValueOffsetTopRight - self:ConvertVector(0, healthBarValueHealth, 0))
        local healthBarValueBottomLeft = worldToViewportPoint(camera, rootPartPosition - healthBarValueOffsetBottomLeft)
        
        healthBar.Visible = visibleOnScreen
        healthBar.Color = espColor
        healthBar.PointA = Vector2New(healthBarTopRight.X, healthBarTopRight.Y)
        healthBar.PointB = Vector2New(healthBarBottomLeft.X, healthBarTopRight.Y)
        healthBar.PointC = Vector2New(healthBarBottomLeft.X, healthBarBottomLeft.Y)
        healthBar.PointD = Vector2New(healthBarTopRight.X, healthBarBottomLeft.Y)
        
        healthBarValue.Visible = visibleOnScreen
        healthBarValue.Color = lerp(ESP_RED_COLOR, ESP_GREEN_COLOR, floatHealth / 100)
        healthBarValue.PointA = Vector2New(healthBarValueTopRight.X, healthBarValueTopRight.Y)
        healthBarValue.PointB = Vector2New(healthBarValueBottomLeft.X, healthBarValueTopRight.Y)
        healthBarValue.PointC = Vector2New(healthBarValueBottomLeft.X, healthBarValueBottomLeft.Y)
        healthBarValue.PointD = Vector2New(healthBarValueTopRight.X, healthBarValueBottomLeft.Y)
    else
        healthBar.Visible = false
        healthBarValue.Visible = false
    end
end

function EntityESP:Hide(bypassTriangle)
    if not bypassTriangle then
        self._triangle.Visible = false
    end
    
    if not self._visible then return end
    self._visible = false
    
    self._label.Visible = false
    self._box.Visible = false
    self._line.Visible = false
    self._healthBar.Visible = false
    self._healthBarValue.Visible = false
end

function EntityESP:Destroy()
    if not self._label then return end
    
    self._label:Destroy()
    self._box:Destroy()
    self._line:Destroy()
    self._healthBar:Destroy()
    self._healthBarValue:Destroy()
    self._triangle:Destroy()
end

local function updateESP()
    local camera = workspace.CurrentCamera
    EntityESP._camera = camera
    if not camera then return end
    
    EntityESP._cameraCFrame = EntityESP._camera.CFrame
    EntityESP._cameraPosition = EntityESP._cameraCFrame.Position
    
    local viewportSize = camera.ViewportSize
    
    EntityESP._viewportSize = Vector2New(viewportSize.X / 2, viewportSize.Y - 10)
    EntityESP._viewportSizeCenter = viewportSize / 2
    
    scalarPointAX, scalarPointAY = scalarSize, scalarSize
    scalarPointBX, scalarPointBY = -scalarSize, -scalarSize
    
    labelOffset = EntityESP:ConvertVector(0, 3.25, 0)
    tracerOffset = EntityESP:ConvertVector(0, -4.5, 0)
    
    boxOffsetTopRight = EntityESP:ConvertVector(2.5, 3, 0)
    boxOffsetBottomLeft = EntityESP:ConvertVector(-2.5, -4.5, 0)
    
    healthBarOffsetTopRight = EntityESP:ConvertVector(-3, 3, 0)
    healthBarOffsetBottomLeft = EntityESP:ConvertVector(-3.5, -4.5, 0)
    
    healthBarValueOffsetTopRight = EntityESP:ConvertVector(-3.05, 2.95, 0)
    healthBarValueOffsetBottomLeft = EntityESP:ConvertVector(3.45, 4.45, 0)
end

-- Initialize
updateESP()
RunService:BindToRenderStep(id, Enum.RenderPriority.Camera.Value, updateESP)

-- Utility functions
local Utility = {
    getCharacter = function(player)
        local character = player.Character
        if not character then return end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return end
        
        return character, humanoid.MaxHealth, (humanoid.Health/humanoid.MaxHealth) * 100, humanoid.Health, character:FindFirstChild("HumanoidRootPart")
    end,
    
    getRootPart = function(player)
        return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    end,
    
    isTeamMate = function(player)
        return player.Team and player.Team == LocalPlayer.Team
    end
}

-- Settings
local Settings = {
    showTeam = false,
    allyColor = Color3.fromRGB(0, 255, 0),
    enemyColor = Color3.fromRGB(255, 0, 0),
    maxEspDistance = 1000,
    toggleBoxes = true,
    toggleTracers = true,
    unlockTracers = false,
    showHealthBar = true,
    proximityArrows = true,
    maxProximityArrowDistance = 100,
    proximityArrowsSize = 20,
    textSize = 13
}

local EntityESP = {}
EntityESP.__index = EntityESP

local worldToViewportPoint = clonefunction(Instance.new('Camera').WorldToViewportPoint)
local vectorToWorldSpace = CFrame.new().VectorToWorldSpace
local getMouseLocation = clonefunction(UserInputService.GetMouseLocation)

local id = HttpService:GenerateGUID(false)
local userId = "1234"

local lerp = Color3.new().lerp
local vector3New = Vector3.new
local Vector2New = Vector2.new

local mathFloor = math.floor
local mathRad = math.rad
local mathCos = math.cos
local mathSin = math.sin
local mathAtan2 = math.atan2

local showTeam = Settings.showTeam
local allyColor = Settings.allyColor
local enemyColor = Settings.enemyColor
local maxEspDistance = Settings.maxEspDistance
local toggleBoxes = Settings.toggleBoxes
local toggleTracers = Settings.toggleTracers
local unlockTracers = Settings.unlockTracers
local showHealthBar = Settings.showHealthBar
local proximityArrows = Settings.proximityArrows
local maxProximityArrowDistance = Settings.maxProximityArrowDistance

local scalarPointAX, scalarPointAY
local scalarPointBX, scalarPointBY

local labelOffset, tracerOffset
local boxOffsetTopRight, boxOffsetBottomLeft
local healthBarOffsetTopRight, healthBarOffsetBottomLeft
local healthBarValueOffsetTopRight, healthBarValueOffsetBottomLeft

local scalarSize = Settings.proximityArrowsSize

local ESP_RED_COLOR = Color3.fromRGB(192, 57, 43)
local ESP_GREEN_COLOR = Color3.fromRGB(39, 174, 96)
local TRIANGLE_ANGLE = mathRad(45)

EntityESP.id = 0

function EntityESP.new(player)
    EntityESP.id += 1
    
    local self = setmetatable({}, EntityESP)
    
    self._id = EntityESP.id
    self._player = player
    self._playerName = player.Name
    
    self._triangle = Drawing.new('Triangle')
    self._triangle.Visible = true
    self._triangle.Thickness = 0
    self._triangle.Color = Color3.fromRGB(255, 255, 255)
    self._triangle.Filled = true
    
    self._label = Drawing.new('Text')
    self._label.Visible = false
    self._label.Center = true
    self._label.Outline = true
    self._label.Text = ''
    self._label.Size = Settings.textSize
    self._label.Color = Color3.fromRGB(255, 255, 255)
    
    self._box = Drawing.new('Quad')
    self._box.Visible = false
    self._box.Thickness = 1
    self._box.Filled = false
    self._box.Color = Color3.fromRGB(255, 255, 255)
    
    self._healthBar = Drawing.new('Quad')
    self._healthBar.Visible = false
    self._healthBar.Thickness = 1
    self._healthBar.Filled = false
    self._healthBar.Color = Color3.fromRGB(255, 255, 255)
    
    self._healthBarValue = Drawing.new('Quad')
    self._healthBarValue.Visible = false
    self._healthBarValue.Thickness = 1
    self._healthBarValue.Filled = true
    self._healthBarValue.Color = Color3.fromRGB(0, 255, 0)
    
    self._line = Drawing.new('Line')
    self._line.Visible = false
    self._line.Color = Color3.fromRGB(255, 255, 255)
    
    self._labelObject = self._label
    
    player._espObject = self
    
    return self
end

function EntityESP:ConvertVector(...)
    return vectorToWorldSpace(self._cameraCFrame, vector3New(...))
end

function EntityESP:GetOffsetTrianglePosition(closestPoint, radiusOfDegree)
    local cosOfRadius, sinOfRadius = mathCos(radiusOfDegree), mathSin(radiusOfDegree)
    local closestPointX, closestPointY = closestPoint.X, closestPoint.Y
    
    local sameBCCos = (closestPointX + scalarPointBX * cosOfRadius)
    local sameBCSin = (closestPointY + scalarPointBX * sinOfRadius)
    
    local sameACSin = (scalarPointAY * sinOfRadius)
    local sameACCos = (scalarPointAY * cosOfRadius)
    
    local pointX1 = (closestPointX + scalarPointAX * cosOfRadius) - sameACSin
    local pointY1 = closestPointY + (scalarPointAX * sinOfRadius) + sameACCos
    
    local pointX2 = sameBCCos - (scalarPointBY * sinOfRadius)
    local pointY2 = sameBCSin + (scalarPointBY * cosOfRadius)
    
    local pointX3 = sameBCCos - sameACSin
    local pointY3 = sameBCSin + sameACCos
    
    return Vector2New(mathFloor(pointX1), mathFloor(pointY1)), 
           Vector2New(mathFloor(pointX2), mathFloor(pointY2)), 
           Vector2New(mathFloor(pointX3), mathFloor(pointY3))
end

function EntityESP:Update()
    local camera = workspace.CurrentCamera
    self._camera = camera
    if not camera then return self:Hide() end
    
    local character, maxHealth, floatHealth, health, rootPart = Utility:getCharacter(self._player)
    if not character then return self:Hide() end
    
    rootPart = rootPart or Utility:getRootPart(self._player)
    if not rootPart then return self:Hide() end
    
    local rootPartPosition = rootPart.Position
    
    local labelPos, visibleOnScreen = worldToViewportPoint(camera, rootPartPosition + labelOffset)
    local triangle = self._triangle
    
    local isTeamMate = Utility:isTeamMate(self._player)
    if isTeamMate and not showTeam then return self:Hide() end
    
    local distance = (rootPartPosition - self._cameraPosition).Magnitude
    if distance > maxEspDistance then return self:Hide() end
    
    local espColor = isTeamMate and allyColor or enemyColor
    local canView = false
    
    if proximityArrows and not visibleOnScreen and distance < maxProximityArrowDistance then
        local vectorUnit
        
        if labelPos.Z < 0 then
            vectorUnit = -(Vector2.new(labelPos.X, labelPos.Y) - self._viewportSizeCenter).Unit
        else
            vectorUnit = (Vector2.new(labelPos.X, labelPos.Y) - self._viewportSizeCenter).Unit
        end
        
        local degreeOfCorner = -mathAtan2(vectorUnit.X, vectorUnit.Y) - TRIANGLE_ANGLE
        local closestPointToPlayer = self._viewportSizeCenter + vectorUnit * scalarSize
        
        local pointA, pointB, pointC = self:GetOffsetTrianglePosition(closestPointToPlayer, degreeOfCorner)
        
        triangle.PointA = pointA
        triangle.PointB = pointB
        triangle.PointC = pointC
        triangle.Color = espColor
        canView = true
    end
    
    triangle.Visible = canView
    if not visibleOnScreen then return self:Hide(true) end
    
    self._visible = visibleOnScreen
    
    local label = self._label
    local box = self._box
    local line = self._line
    local healthBar = self._healthBar
    local healthBarValue = self._healthBarValue
    
    local text = string.format("[%s] [%d]\n[%d/%d] [%d%%] [%s]",
        self._playerName,
        mathFloor(distance),
        mathFloor(health),
        mathFloor(maxHealth),
        mathFloor(floatHealth),
        userId
    )
    
    label.Visible = visibleOnScreen
    label.Position = Vector2New(labelPos.X, labelPos.Y - label.TextBounds.Y)
    label.Text = text
    label.Color = espColor
    
    if toggleBoxes then
        local boxTopRight = worldToViewportPoint(camera, rootPartPosition + boxOffsetTopRight)
        local boxBottomLeft = worldToViewportPoint(camera, rootPartPosition + boxOffsetBottomLeft)
        
        box.Visible = visibleOnScreen
        box.PointA = Vector2New(boxTopRight.X, boxTopRight.Y)
        box.PointB = Vector2New(boxBottomLeft.X, boxTopRight.Y)
        box.PointC = Vector2New(boxBottomLeft.X, boxBottomLeft.Y)
        box.PointD = Vector2New(boxTopRight.X, boxBottomLeft.Y)
        box.Color = espColor
    else
        box.Visible = false
    end
    
    if toggleTracers then
        local linePosition = worldToViewportPoint(camera, rootPartPosition + tracerOffset)
        
        line.Visible = visibleOnScreen
        line.From = unlockTracers and getMouseLocation(UserInputService) or self._viewportSize
        line.To = Vector2New(linePosition.X, linePosition.Y)
        line.Color = espColor
    else
        line.Visible = false
    end
    
    if showHealthBar then
        local healthBarValueHealth = (1 - (floatHealth / 100)) * 7.4
        
        local healthBarTopRight = worldToViewportPoint(camera, rootPartPosition + healthBarOffsetTopRight)
        local healthBarBottomLeft = worldToViewportPoint(camera, rootPartPosition + healthBarOffsetBottomLeft)
        
        local healthBarValueTopRight = worldToViewportPoint(camera, rootPartPosition + healthBarValueOffsetTopRight - self:ConvertVector(0, healthBarValueHealth, 0))
        local healthBarValueBottomLeft = worldToViewportPoint(camera, rootPartPosition - healthBarValueOffsetBottomLeft)
        
        healthBar.Visible = visibleOnScreen
        healthBar.Color = espColor
        healthBar.PointA = Vector2New(healthBarTopRight.X, healthBarTopRight.Y)
        healthBar.PointB = Vector2New(healthBarBottomLeft.X, healthBarTopRight.Y)
        healthBar.PointC = Vector2New(healthBarBottomLeft.X, healthBarBottomLeft.Y)
        healthBar.PointD = Vector2New(healthBarTopRight.X, healthBarBottomLeft.Y)
        
        healthBarValue.Visible = visibleOnScreen
        healthBarValue.Color = lerp(ESP_RED_COLOR, ESP_GREEN_COLOR, floatHealth / 100)
        healthBarValue.PointA = Vector2New(healthBarValueTopRight.X, healthBarValueTopRight.Y)
        healthBarValue.PointB = Vector2New(healthBarValueBottomLeft.X, healthBarValueTopRight.Y)
        healthBarValue.PointC = Vector2New(healthBarValueBottomLeft.X, healthBarValueBottomLeft.Y)
        healthBarValue.PointD = Vector2New(healthBarValueTopRight.X, healthBarValueBottomLeft.Y)
    else
        healthBar.Visible = false
        healthBarValue.Visible = false
    end
end

function EntityESP:Hide(bypassTriangle)
    if not bypassTriangle then
        self._triangle.Visible = false
    end
    
    if not self._visible then return end
    self._visible = false
    
    self._label.Visible = false
    self._box.Visible = false
    self._line.Visible = false
    self._healthBar.Visible = false
    self._healthBarValue.Visible = false
end

function EntityESP:Destroy()
    if not self._label then return end
    
    self._label:Destroy()
    self._box:Destroy()
    self._line:Destroy()
    self._healthBar:Destroy()
    self._healthBarValue:Destroy()
    self._triangle:Destroy()
end

local function updateESP()
    local camera = workspace.CurrentCamera
    EntityESP._camera = camera
    if not camera then return end
    
    EntityESP._cameraCFrame = EntityESP._camera.CFrame
    EntityESP._cameraPosition = EntityESP._cameraCFrame.Position
    
    local viewportSize = camera.ViewportSize
    
    EntityESP._viewportSize = Vector2New(viewportSize.X / 2, viewportSize.Y - 10)
    EntityESP._viewportSizeCenter = viewportSize / 2
    
    scalarPointAX, scalarPointAY = scalarSize, scalarSize
    scalarPointBX, scalarPointBY = -scalarSize, -scalarSize
    
    labelOffset = EntityESP:ConvertVector(0, 3.25, 0)
    tracerOffset = EntityESP:ConvertVector(0, -4.5, 0)
    
    boxOffsetTopRight = EntityESP:ConvertVector(2.5, 3, 0)
    boxOffsetBottomLeft = EntityESP:ConvertVector(-2.5, -4.5, 0)
    
    healthBarOffsetTopRight = EntityESP:ConvertVector(-3, 3, 0)
    healthBarOffsetBottomLeft = EntityESP:ConvertVector(-3.5, -4.5, 0)
    
    healthBarValueOffsetTopRight = EntityESP:ConvertVector(-3.05, 2.95, 0)
    healthBarValueOffsetBottomLeft = EntityESP:ConvertVector(3.45, 4.45, 0)
end

-- Initialize
updateESP()
RunService:BindToRenderStep(id, Enum.RenderPriority.Camera.Value, updateESP)
